/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package biblioteca.sergiogomez.vista;

import biblioteca.sergiogomez.DAO.Modelo.Libro;
import biblioteca.sergiogomez.DAO.Modelo.Usuario;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.ArrayList;
import javax.swing.DefaultListModel;
import javax.swing.JOptionPane;

/**
 *
 * @author Sergio
 */
public class Prestamos extends javax.swing.JInternalFrame implements ActionListener {
    private final Usuario usuario;
    private DefaultListModel<String> listaLibrosSinPrestamo;
    private DefaultListModel<String> listaLibrosPrestados;
    private ArrayList<Libro>  librosPrestadosUsuario;
    private ArrayList<Libro>  librosSinPrestamo;
    
    /**
     * Creates new form Prestamos
     * @param usuario
     */
    public Prestamos(Usuario usuario) {
        this.usuario=usuario;
        cargarLibrosUsuario();
        cargarLibrosSinPrestamo();
        initComponents();
        jLabel1.setText("Libros prestados al usuario: "+usuario.getNombreUsuario());
        anadirListeners();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        librosPrestados = new javax.swing.JList<>();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        librosDisponibles = new javax.swing.JList<>();
        prestar = new javax.swing.JButton();
        devolver = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();

        setClosable(true);
        setFrameIcon(new javax.swing.ImageIcon(getClass().getResource("/biblioteca/sergiogomez/imagenes/biblioteca.jpg"))); // NOI18N

        librosPrestados.setModel(listaLibrosPrestados);
        jScrollPane1.setViewportView(librosPrestados);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 267, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1)
        );

        librosDisponibles.setModel(listaLibrosSinPrestamo);
        jScrollPane2.setViewportView(librosDisponibles);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 270, Short.MAX_VALUE)
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 328, Short.MAX_VALUE)
        );

        prestar.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        prestar.setText("Prestar");

        devolver.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        devolver.setText("Devolver");

        jLabel1.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Libros prestados a: ");

        jLabel2.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel2.setText("Libros disponiblies");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(devolver, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(prestar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(1, 1, 1)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addGap(122, 122, 122)
                .addComponent(prestar)
                .addGap(67, 67, 67)
                .addComponent(devolver)
                .addContainerGap(165, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton devolver;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JList<String> librosDisponibles;
    private javax.swing.JList<String> librosPrestados;
    private javax.swing.JButton prestar;
    // End of variables declaration//GEN-END:variables

    private void cargarLibrosUsuario() {
        listaLibrosPrestados=new DefaultListModel();
        librosPrestadosUsuario=Principal.getConexion().cargarLibrosUsuairo(usuario.getId());
        librosPrestadosUsuario.forEach((libro) -> {
            listaLibrosPrestados.addElement(libro.getTitulo());
        });
    }
    
    private void cargarLibrosSinPrestamo(){
        listaLibrosSinPrestamo=new DefaultListModel();
        librosSinPrestamo=Principal.getConexion().cargarLibrosSinPrestamo();
        librosSinPrestamo.forEach((libro) -> {
            System.out.println(libro.getTitulo());
            listaLibrosSinPrestamo.addElement(libro.getTitulo());
        });
    }

    private void anadirListeners() {
        prestar.addActionListener(this);
        devolver.addActionListener(this);
    }

    @Override
    public void actionPerformed(ActionEvent e) {
        switch(e.getActionCommand()){
            case "Prestar":
                prestarLibro();
                break;
            case "Devolver":
                devolverLibro();
                break;
        }
    }

    private void prestarLibro() {
        if(librosDisponibles.getSelectedIndex()!=-1){
            a√±adirReservaABiblioteca(listaLibrosSinPrestamo.get(librosDisponibles.getSelectedIndex()));
            Principal.getConexion().realizarReserva(usuario.getId(),listaLibrosSinPrestamo.get(librosDisponibles.getSelectedIndex()));
            listaLibrosPrestados.addElement(listaLibrosSinPrestamo.get(librosDisponibles.getSelectedIndex()));
            listaLibrosSinPrestamo.remove(librosDisponibles.getSelectedIndex());
        }else{
            JOptionPane.showMessageDialog(null,"Libro no seleccionado","Error", JOptionPane.ERROR_MESSAGE);
        }
    }
    
    private void devolverLibro() {
        if(librosPrestados.getSelectedIndex()!=-1){
            a√±adirDevolucionABiblioteca(listaLibrosPrestados.get(librosPrestados.getSelectedIndex()));
            Principal.getConexion().realizarDevolucion(usuario.getId(), listaLibrosPrestados.get(librosPrestados.getSelectedIndex()));
            listaLibrosSinPrestamo.addElement(listaLibrosPrestados.get(librosPrestados.getSelectedIndex()));
            listaLibrosPrestados.remove(librosPrestados.getSelectedIndex());
        }else{
            JOptionPane.showMessageDialog(null,"Libro no seleccionado","Error", JOptionPane.ERROR_MESSAGE);
        }
    }
    
    private void a√±adirReservaABiblioteca(String titulo){
        Principal.getBiblioteca().getLibros().stream().filter((l) -> (l.getTitulo().equalsIgnoreCase(titulo))).forEachOrdered((l) -> {
            l.setIdprestamo(usuario.getId());
        }); 
    }
    
    private void a√±adirDevolucionABiblioteca(String titulo){
        Principal.getBiblioteca().getLibros().stream().filter((l) -> (l.getTitulo().equalsIgnoreCase(titulo))).forEachOrdered((l) -> {
            l.setIdprestamo(0);
        }); 
    }
}
